/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 *
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 */

/*
 * Do not add a 'grandom' part to the grammar's fully qualified name,
 * otherwise an unfortunate package structures will be generated.
 */
grammar de.cau.cs.kieler.kgraph.text.GRandom with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
generate grandom "http://www.cau.de/cs/kieler/kgraph/text/GRandom"

RandGraph:
	(configs+=Configuration)*
;

enum Formats: kgt | kgx;

Configuration:
    'generate' samples=INT
	 form=Form ( '{'
	     ( (nodes=Nodes)?
	           & (edges=Edges)?
	           & (mW?='maxWidth' '=' maxWidth=Integer)?
	           & (mD?='maxDegree' '=' maxDegree=Integer)?
	           & (pF?='partitionFraction' '=' fraction=DoubleQuantity)?
	           & (hierarchy=Hierarchy)?
	           & ('seed' '=' seed=Integer)?
	           & ('format' '=' format=Formats)?
	           & ('filename' '=' filename=STRING)?
	           )
    '}')?
;

Hierarchy:
    {Hierarchy}
	'hierarchy' ('{'
          (('levels' '=' levels=DoubleQuantity)? // MISSING
              & ('cross-hierarchy edges' '=' edges=DoubleQuantity)?
              & ('compound nodes' '=' numHierarchNodes=DoubleQuantity)?
              & ('cross-hierarchy relative edges' '=' crossHierarchRel=DoubleQuantity)?
          )
    '}')?
;

enum Form: trees | bipartite='bipartite graphs' | custom='graphs'
    | triconnected='triconnected graphs' | biconnected='biconnected graphs' | acyclic='acyclic graphs'
;

Edges:
    ('edges'  (density?='density' | total?='total' | relative?='relative' | outbound?='outgoing')
        '=' nEdges=DoubleQuantity)
    ('{'
         ((labels?='labels')? &
         (selfLoops?='self loops')?)
    '}')?
;

Nodes:
    {Nodes}
    'nodes' '=' nNodes=DoubleQuantity ( '{'
       ((ports=Ports)? & 
        (labels?=Labels)? & 
        (size=Size)? &
        (removeIsolated?='remove isolated')? )
    '}'
    )?
;

Size:
	{Size}
	('size' ('{'
        (('height' '=' height=DoubleQuantity)? &
        ('width' '=' width=DoubleQuantity)?)
	'}')?)
;

Ports:
    {Ports}
    'ports' ('{'
	      ((labels?=Labels)?
	          & ('re-use' '=' reUse=DoubleQuantity)? 
	          & (size=Size)?
	          & ('constraint' '=' constraint=ConstraintType)?
	          & (flow+=Flow)*
	      )
	'}')?
;

Flow:
	(flowType=FlowType side=Side '=' amount=DoubleQuantity)
;

enum Side: north | east | south | west;

enum FlowType: incoming | outgoing;

enum ConstraintType: free | side | position | order | ratio;

Labels:
    'labels'
;

DoubleQuantity:
	quant=Double |  min=Double minMax?='to' max=Double | mean=Double gaussian?=Pm stddv=Double
;

Pm:
    '+/-'
;

Double returns ecore::EDoubleObject:
    INT ('.' INT)?
;

Float returns ecore::EFloatObject:
    INT ('.' INT)?
;

Integer returns ecore::EIntegerObject:
    INT ('.' INT)?
;


