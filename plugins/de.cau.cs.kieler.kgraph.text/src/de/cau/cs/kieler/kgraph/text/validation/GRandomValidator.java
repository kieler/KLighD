/**
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * generated by Xtext 2.9.2
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package de.cau.cs.kieler.kgraph.text.validation;

import java.util.ArrayList;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Pair;

import com.google.common.base.Objects;

import de.cau.cs.kieler.kgraph.text.grandom.Configuration;
import de.cau.cs.kieler.kgraph.text.grandom.Form;
import de.cau.cs.kieler.kgraph.text.grandom.GrandomPackage;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class GRandomValidator extends AbstractGRandomValidator {

    public static final ArrayList<Pair<Function1<Configuration, Boolean>, Pair<String, EAttribute>>> errors =
            CollectionLiterals
                    .<Pair<Function1<Configuration, Boolean>, Pair<String, EAttribute>>> newArrayList(
                            Pair.<Function1<Configuration, Boolean>, Pair<String, EAttribute>> of(
                                    new Function1<Configuration, Boolean>() {
                                        public Boolean apply(final Configuration c) {
                                            return Boolean.valueOf(
                                                    ((!Objects.equal(c.getForm(), Form.TREES))
                                                            && c.isMD()));
                                        }
                                    },
                                    Pair.<String, EAttribute> of("maxDegree only defined on trees.",
                                            GrandomPackage.Literals.CONFIGURATION__MD)),
                            Pair.<Function1<Configuration, Boolean>, Pair<String, EAttribute>> of(
                                    new Function1<Configuration, Boolean>() {
                                        public Boolean apply(final Configuration c) {
                                            return Boolean.valueOf(
                                                    ((!Objects.equal(c.getForm(), Form.TREES))
                                                            && c.isMW()));
                                        }
                                    },
                                    Pair.<String, EAttribute> of("maxWidth only defined on trees.",
                                            GrandomPackage.Literals.CONFIGURATION__MW)),
                            Pair.<Function1<Configuration, Boolean>, Pair<String, EAttribute>> of(
                                    new Function1<Configuration, Boolean>() {
                                        public Boolean apply(final Configuration c) {
                                            return Boolean.valueOf(
                                                    ((!Objects.equal(c.getForm(), Form.BIPARTITE))
                                                            && c.isPF()));
                                        }
                                    },
                                    Pair.<String, EAttribute> of(
                                            "Partition Fraction only defined on bipartite graphs.",
                                            GrandomPackage.Literals.CONFIGURATION__PF)));

    @Check
    public void optionsRestrictions(final Configuration conf) {
        for (final Pair<Function1<Configuration, Boolean>, Pair<String, EAttribute>> p : GRandomValidator.errors) {
            Boolean _apply = p.getKey().apply(conf);
            if ((_apply).booleanValue()) {
                this.error(p.getValue().getKey(), p.getValue().getValue());
            }
        }
    }
}
