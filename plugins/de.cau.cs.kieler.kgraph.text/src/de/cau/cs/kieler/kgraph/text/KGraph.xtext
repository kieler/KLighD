/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 *
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 */
grammar de.cau.cs.kieler.kgraph.text.KGraph
hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/KlighdGraph"
import "http://kieler.cs.cau.de/KRendering"


//----------------- KGraph -----------------

ParentKNode returns KNode:
    {KNode}
    ('kgraph' (data+=KIdentifier)?)?
    (('pos' ':' (('x' '=' xpos=Float)? & ('y' '=' ypos=Float)?))?
        & ('size' ':' (('width' '=' width=Float)? & ('height' '=' height=Float)?))?
        & ('properties' ':' (persistentEntries+=Property)*)?)
    (('insets' ':' insets=KInsets) | insets=EmptyKInsets)
    (labels+=KLabel | children+=KNode | ports+=KPort | outgoingEdges+=KEdge
    	| data+=KRendering | data+=KRenderingLibrary)*;

KNode returns KNode:
    {KNode}
    'knode' (data+=KIdentifier)? ('{'
        (('pos' ':' (('x' '=' xpos=Float)? & ('y' '=' ypos=Float)?))?
            & ('size' ':' (('width' '=' width=Float)? & ('height' '=' height=Float)?))?
            & ('properties' ':' (persistentEntries+=Property)*)?)
        (('insets' ':' insets=KInsets) | insets=EmptyKInsets)
        (labels+=KLabel | children+=KNode | ports+=KPort | outgoingEdges+=KEdge
        	| data+=KRendering | data+=KRenderingLibrary)*
    '}')?;

KEdge returns KEdge:
    'kedge' (data+=KIdentifier)? '(' (':' sourcePort=[KPort|QualifiedID])?
            '->' target=[KNode|QualifiedID]
            (':' targetPort=[KPort|QualifiedID])? ')'
            ('{'
        (('points' ':'
            ((sourcePoint=KPoint ((';' (bendPoints+=KPoint ';')* targetPoint=KPoint)
                | targetPoint=EmptyKPoint))
            | (sourcePoint=EmptyKPoint targetPoint=EmptyKPoint))
        ) | (sourcePoint=EmptyKPoint targetPoint=EmptyKPoint))
        ('properties' ':' (persistentEntries+=Property)*)?
        (labels+=KLabel | data+=KRendering)*
    '}')?;

KLabel returns KLabel:
    {KLabel}
    'klabel' (data+=KIdentifier)? (text=STRING)? ('{'
        (('pos' ':' (('x' '=' xpos=Float)? & ('y' '=' ypos=Float)?))?
        & ('size' ':' (('width' '=' width=Float)? & ('height' '=' height=Float)?))?
        & ('properties' ':' (persistentEntries+=Property)*)?)
        (data+=KRendering)*
    '}')?;

KPort returns KPort:
    {KPort}
    'kport' (data+=KIdentifier)? ('{'
        (('pos' ':' (('x' '=' xpos=Float)? & ('y' '=' ypos=Float)?))?
        & ('size' ':' (('width' '=' width=Float)? & ('height' '=' height=Float)?))?
        & ('properties' ':' (persistentEntries+=Property)*)?)
        (labels+=KLabel | data+=KRendering)*
    '}')?;


//-------------- KLayoutData ---------------

Property returns PersistentEntry:
    key=QualifiedID '=' value=PropertyValue;

KIdentifier returns KIdentifier:
    id=QualifiedID ('[' (persistentEntries+=Property)* ']')?;

KInsets returns KInsets:
    {KInsets}
    (('top' '=' top=Float)? & ('bottom' '=' bottom=Float)?
        & ('left' '=' left=Float)? & ('right' '=' right=Float)?);

EmptyKInsets returns KInsets:
    {KInsets};

KPoint returns KPoint:
    x=Float ',' y=Float;

EmptyKPoint returns KPoint:
    {KPoint};


//--------------- KRendering ---------------

KRendering returns KRendering:
    KSimpleRendering | KContainerRendering | KPolyline;

KSimpleRendering returns KRendering:
	(KRenderingRef | KChildArea | KText)
	(id=QualifiedID)? ('[' (persistentEntries+=Property)* ']')? ('{'
		(('styles' ':' (styles+=KStyle)*)?
		& ('actions' ':' (actions+=KAction)*)?
		& (placementData=KPlacementData)?)
	'}')?;

KContainerRendering returns KContainerRendering:
	(KRectangle | KRoundedRectangle | KEllipse | KArc | KCustomRendering | KImage)
	(id=QualifiedID)? ('[' (persistentEntries+=Property)* ']')? ('{'
		(('styles' ':' (styles+=KStyle)*)?
		& ('actions' ':' (actions+=KAction)*)?
		& (placementData=KPlacementData)?
		& (childPlacement=KPlacement)?)
		(children+=KRendering)*
	'}')?;

KRenderingRef returns KRenderingRef:
	'krendering' '*' rendering=[KRendering|QualifiedID];

KChildArea returns KChildArea:
	{KChildArea}
	'kchildArea';

KText returns KText:
	{KText}
	'ktext' ('(' text=STRING (',' cursorSelectable=BOOLEAN)? ')')?;

KRectangle returns KRectangle:
	{KRectangle}
	'krectangle';

KRoundedRectangle returns KRoundedRectangle:
	{KRoundedRectangle}
	'kroundedRectangle' ('(' cornerWidth=Float ',' cornerHeight=Float ')')?;

KEllipse returns KEllipse:
	{KEllipse}
	'kellipse';

KArc returns KArc:
	{KArc}
	'karc' ('(' startAngle=DEGREES ',' arcAngle=DEGREES (',' arcType=Arc)? ')');

KCustomRendering returns KCustomRendering:
	{KCustomRendering}
	'kcustomRendering' ('(' (bundleName=QualifiedID ':')? className=QualifiedID ')')?;

KImage returns KImage:
	{KImage}
	'kimage' ('(' (bundleName=QualifiedID ':')? imagePath=STRING
		('clipShape' clipShape=KRendering)? ')')?;

KPolyline returns KPolyline:
	(KSimplePolyline | KPolygon | KRoundedBendsPolyline | KSpline)
	(id=QualifiedID)? ('[' (persistentEntries+=Property)* ']')? ('{'
		(('points' ':' (points+=KPosition (';' points+=KPosition)*)?)?
		& ('styles' ':' (styles+=KStyle)*)?
		& ('actions' ':' (actions+=KAction)*)?
		& (placementData=KPlacementData)?
		& (childPlacement=KPlacement)?)
		('junction' junctionPointRendering=KRendering)?
		(children+=KRendering)*
	'}')?;

KSimplePolyline returns KPolyline:
	{KPolyline}
	'kpolyline';

KPolygon returns KPolygon:
	{KPolygon}
	'kpolygon';

KRoundedBendsPolyline returns KRoundedBendsPolyline:
	{KRoundedBendsPolyline}
	'kroundedPolyline' ('(' bendRadius=Float ')')?;

KSpline returns KSpline:
	{KSpline}
	'kspline';


//----------------- KStyle -----------------

KStyle returns KStyle:
	(KColoring | KFontBold | KFontItalic | KFontName | KFontSize | KTextUnderline
	| KHorizontalAlignment | KVerticalAlignment | KInvisibility | KLineCap | KLineJoin
	| KLineStyle | KLineWidth | KRotation | KShadow | KStyleRef)
	('modifier' modifierId=QualifiedID)?;

KColoring returns KColoring:
	(KForeground | KBackground) '=' 
	(
      'null' |
	  ( color=KColor
	      (',' alpha=ALPHA)?
	      ('->' targetColor=KColor (',' targetAlpha=ALPHA)? ('(' gradientAngle=Float ')')?)?
	   )
	 );

KForeground returns KForeground:
	{KForeground}
	(propagateToChildren?='propagate')? (selection?='selection')? 'foreground';

KBackground returns KBackground:
	{KBackground}
	(propagateToChildren?='propagate')? (selection?='selection')? 'background';

KFontBold returns KFontBold:
	(propagateToChildren?='propagate')? (selection?='selection')? 'bold' '=' bold=BOOLEAN;

KFontItalic returns KFontItalic:
	(propagateToChildren?='propagate')? (selection?='selection')? 'italic' '=' italic=BOOLEAN;

KFontName returns KFontName:
	(propagateToChildren?='propagate')? (selection?='selection')? 'fontName' '=' name=STRING;

KFontSize returns KFontSize:
	(propagateToChildren?='propagate')? (selection?='selection')? (scaleWithZoom?='scale')?
	'fontSize' '=' size=FSIZE;

KTextUnderline returns KTextUnderline:
	(propagateToChildren?='propagate')? (selection?='selection')? 'underline' '=' underline=Underline;

KHorizontalAlignment returns KHorizontalAlignment:
	(propagateToChildren?='propagate')? (selection?='selection')? 'hAlign' '=' horizontalAlignment=HorizontalAlignment;

KVerticalAlignment returns KVerticalAlignment:
	(propagateToChildren?='propagate')? (selection?='selection')? 'vAlign' '=' verticalAlignment=VerticalAlignment;

KInvisibility returns KInvisibility:
	(propagateToChildren?='propagate')? (selection?='selection')? 'invisible' '=' invisible=BOOLEAN;

KLineCap returns KLineCap:
    (propagateToChildren?='propagate')? (selection?='selection')? 'lineCap' '=' lineCap=LineCap;

KLineJoin returns KLineJoin:
    (propagateToChildren?='propagate')? (selection?='selection')? 'lineJoin' '=' lineJoin=LineJoin;

KLineStyle returns KLineStyle:
	(propagateToChildren?='propagate')? (selection?='selection')? 'lineStyle' '=' lineStyle=LineStyle
	('dashOffset' '=' dashOffset=Float)? ('dashPattern' '=' (dashPattern+=Float)*)?;

KLineWidth returns KLineWidth:
	(propagateToChildren?='propagate')? (selection?='selection')? 'lineWidth' '=' lineWidth=Float;

KRotation returns KRotation:
	(propagateToChildren?='propagate')? (selection?='selection')? 'rotation' '=' rotation=Float
	('(' 'anchor' '=' rotationAnchor=KPosition ')')?;

KShadow returns KShadow:
	{KShadow}
	(propagateToChildren?='propagate')? (selection?='selection')? 'shadow' '=' (color=KColor)?
	('(' xOffset=Float ',' yOffset=Float (',' blur=Float)? ')')?;

KStyleRef returns KStyleRef:
	 (selection?='selection')? 'reference' '=' styleHolder=[KStyleHolder|QualifiedID];


//----------- KRendering Utility ------------

KRenderingLibrary returns KRenderingLibrary:
	{KRenderingLibrary}
	'krenderingLibrary'
	('[' (persistentEntries+=Property)* ']')? '{'
		(renderings+=KRendering | renderings+=KStyleHolder)*
	'}';

KStyleHolder returns KStyleHolder:
	{KStyleHolder}
	'kstylesTemplate' (id=QualifiedID)? '{'
		(styles+=KStyle)*
	'}';

KPlacement returns KPlacement:
	KGridPlacement;

KGridPlacement returns KGridPlacement:
	{KGridPlacement}
	'grid' ':'
		(('topLeftAnchor' '=' topLeft=KPosition)?
		& ('bottomRightAnchor' '=' bottomRight=KPosition)?
		& ('columns' '=' numColumns=NATURAL)?);

KPlacementData returns KPlacementData:
	KAreaPlacementData | KPointPlacementData | KGridPlacementData | KDecoratorPlacementData;

KAreaPlacementData returns KAreaPlacementData:
	{KAreaPlacementData}
	'areaData' ':'
		(('topLeftAnchor' '=' topLeft=KPosition)?
		& ('bottomRightAnchor' '=' bottomRight=KPosition)?);

KPointPlacementData returns KPointPlacementData:
	{KPointPlacementData}
	'pointData' ':'
		(('referencePoint' '=' referencePoint=KPosition)?
        & ('minimalWidth' '=' minWidth=Float)?
        & ('minimalHeight' '=' minHeight=Float)?
		& ('horizontalAlignment' '=' horizontalAlignment=HorizontalAlignment)?
		& ('verticalAlignment' '=' verticalAlignment=VerticalAlignment)?
		& ('horizontalMargin' '=' horizontalMargin=Float)?
		& ('verticalMargin' '=' verticalMargin=Float)?);

KGridPlacementData returns KGridPlacementData:
	{KGridPlacementData}
	'gridData' ':'
		(('topLeftAnchor' '=' topLeft=KPosition)?
		& ('bottomRightAnchor' '=' bottomRight=KPosition)?
		& ('minCellWidth' '=' minCellWidth=Float)?
		& ('minCellHeight' '=' minCellHeight=Float)?
		& ('flexibleWidth' '=' flexibleWidth=BOOLEAN)?
		& ('flexibleHeight' '=' flexibleHeight=BOOLEAN)?);

KDecoratorPlacementData returns KDecoratorPlacementData:
	{KDecoratorPlacementData}
	'decoratorData' ':'
		(('xoffset' '=' xOffset=Float)?
		& ('yoffset' '=' yOffset=Float)?
		& ('width' '=' width=Float)?
		& ('height' '=' height=Float)?
		& ('relativePos' '=' relative=Float)?
		& ('absolutePos' '=' absolute=Float)?
		& ('rotateWithLine' '=' rotateWithLine=BOOLEAN)?);

KAction returns KAction:
	trigger=Trigger '=>' actionId=QualifiedID;

KPosition returns KPosition:
	x=KXPosition ',' y=KYPosition;

KXPosition returns KXPosition:
	(KLeftPosition | KRightPosition)
	(relative=PERCENT | (relative=PERCENT '+')? absolute=Float)?;

KLeftPosition returns KLeftPosition:
	{KLeftPosition}
	'left';

KRightPosition returns KRightPosition:
	{KRightPosition}
	'right';

KYPosition returns KYPosition:
	(KTopPosition | KBottomPosition)
	(relative=PERCENT | (relative=PERCENT '+')? absolute=Float)?;

KTopPosition returns KTopPosition:
	{KTopPosition}
	'top';

KBottomPosition returns KBottomPosition:
	{KBottomPosition}
	'bottom';

KColor returns KColor:
	(red=RED (',' green=GREEN)? (',' blue=BLUE)?)
	| (green=GREEN (',' blue=BLUE)?)
	| blue=BLUE;


//--------------- Terminals ----------------

QualifiedID returns ecore::EString:
    ID ('.' ID)*;

PropertyValue returns ecore::EString:
    BOOLEAN | STRING | Float | QualifiedID;

Float returns ecore::EFloat:
	TFLOAT | NATURAL;

enum Arc returns Arc:
    OPEN='open' | CHORD='chord' | PIE='pie';

enum HorizontalAlignment returns HorizontalAlignment:
	LEFT='left' | CENTER='center' | RIGHT='right';

enum VerticalAlignment returns VerticalAlignment:
	TOP='top' | CENTER='center' | BOTTOM='bottom';

enum Underline returns Underline:
	NONE='none' | SINGLE='single' | DOUBLE='double' | ERROR='error' | SQUIGGLE="squiggle" | LINK='link';

enum LineStyle returns LineStyle:
	SOLID='solid' | DASH='dash' | DOT='dot' | DASHDOT='dash-dot' | DASHDOTDOT='dash-dot-dot' | CUSTOM='custom';

enum LineCap returns LineCap:
    CAP_FLAT='flat' | CAP_ROUND='round' | CAP_SQUARE='square';

enum LineJoin returns LineJoin:
    JOIN_MITER='miter' | JOIN_ROUND='round' | JOIN_BEVEL='bevel';

enum Trigger returns Trigger:
	SINGLECLICK='singleClick' | DOUBLECLICK='doubleClick' | SINGLE_OR_MULTICLICK='singleOrMultiClick'
	| MIDDLE_SINGLECLICK='middleSingleClick' | MIDDLE_DOUBLECLICK='middleDoubleClick' | MIDDLE_SINGLE_OR_MULTICLICK='middleSingleOrMultiClick';

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false';
terminal RED returns ecore::EInt:
	('0'..'9')+ 'r';
terminal GREEN returns ecore::EInt:
	('0'..'9')+ 'g';
terminal BLUE returns ecore::EInt:
	('0'..'9')+ 'b';
terminal ALPHA returns ecore::EInt:
	('0'..'9')+ 'a';
terminal FSIZE returns ecore::EInt:
	('0'..'9')+ 'pt';
terminal DEGREES returns ecore::EFloat:
	('+' | '-')? (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+) 'deg';
terminal PERCENT returns ecore::EFloat:
	('+' | '-')? (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+) '%';
terminal TFLOAT returns ecore::EFloat:
    ('+' | '-') (
        ('0'..'9')+ ('.' ('0'..'9')*)? (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
        | '.' ('0'..'9')+ (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
    )
    | ('0'..'9')+ '.' ('0'..'9')* (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
    | '.' ('0'..'9')+ (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
    | ('0'..'9')+ ('e' | 'E') ('+' | '-')? ('0'..'9')+;
terminal NATURAL returns ecore::EInt:
	('0'..'9')+;
terminal ID:
    '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING :
    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\') | !('\\'|'"') )* '"';

terminal ML_COMMENT    : '/*' -> '*/';
terminal SL_COMMENT     : '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS         : (' '|'\t'|'\r'|'\n')+;
