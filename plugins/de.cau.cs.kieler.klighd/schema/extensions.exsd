<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="de.cau.cs.kieler.klighd" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="de.cau.cs.kieler.klighd" id="extensions" name="Compound extension point for all kinds of extensions"/>
      </appinfo>
      <documentation>
         This extension point is to be used to register extensions like actions, modifiers, etc. except diagram synthesis implementation, which are registered via the diagramSynthesis extension point.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <choice minOccurs="1" maxOccurs="unbounded">
            <element ref="action"/>
            <element ref="styleModifier"/>
            <element ref="exporter"/>
            <element ref="exportBranding"/>
            <element ref="updateStrategy"/>
            <element ref="viewer"/>
            <element ref="wrapper"/>
            <element ref="offscreenRenderer"/>
            <element ref="handler"/>
            <element ref="startupHook"/>
         </choice>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewer">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IViewerProvider"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="updateStrategy">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IUpdateStrategy"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="styleModifier">
      <annotation>
         <documentation>
            Allows to register style modification implementations that are executed after the application of the automatic layout on a certain KStyle, if mentioned in that style.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IStyleModifier"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="action">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IAction"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="wrapper">
      <complexType>
         <attribute name="figureClass" type="string" use="required">
            <annotation>
               <documentation>
                  The class of the figure implementations to be wrapped goes here. Please choose a class as concrete as possible in order to avoid ambiguities.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="wrapperClass" type="string" use="required">
            <annotation>
               <documentation>
                  The wrapper figure class goes here. It is supposed to be compatible to the figure of the used rendering framework, e.g. PNode or ...draw2d.Figure.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="exporter">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IDiagramExporter"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="subFormat" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="extension" type="string" use="required">
            <annotation>
               <documentation>
                  The file extension, e.g., png (without leading dot)
               </documentation>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  An additional description that will be displayed in a file dialog, thus it should be as short as possible.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="supportsTiling" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="exportBranding">
      <annotation>
         <documentation>
            Registration of diagram printout/export customizers allowing to add frames, author information, and confidentiality remarks to diagram printouts and exports.
Note: Implementations should not directly implement the required interface but subclass &apos;de.cau.cs.kieler.klighd.piccolo.export.AbstractExportBranding&apos; situated in the plug-in
 &apos;code de.cau.cs.kieler.klighd.piccolo&apos;.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IExportBranding"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="supportedFormats" type="string">
            <annotation>
               <documentation>
                  A space/comma separated list of formats like svg, gml, etc.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="offscreenRenderer">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IOffscreenRenderer"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="supportedFormats" type="string">
            <annotation>
               <documentation>
                  A space/comma separated list of formats like svg, gml, etc.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="handler">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The class implementing the handler interface
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IModifyModelHandler"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="startupHook">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Class that is to be used to programmatically register KLighD extensions during startup.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.klighd.IKlighdStartupHook"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
