/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2019,2020 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package de.cau.cs.kieler.klighd.lsp

import org.eclipse.xtext.ide.server.WorkspaceManager
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.common.util.URI

/**
 * A workspace manager that allows to get the resource generated by a file referenced by a URI.
 * 
 * @author nre
 */
class KeithWorkspaceManager extends WorkspaceManager {
    
    /** Lock for synchronizing access to resource loading. */
    Object resourceLoadLock = new Object
    
    /**
     * Returns the resource referenced by a file URI, or null if no resource is available.
     * 
     * @param uri The uri.
     * @return The resource.
     */
    def Resource getResource(URI uri) {
        val resourceURI = uri.trimFragment
        val projectMnr = getProjectManager(resourceURI)
        try {
            // The first load of a resource will modify it and fill its contents after the resource itself is
            // already available. To avoid having a loaded resource without content in a paralell Thread,
            // synchronize the resource loading so that only fully loaded resources will get used.
            synchronized (resourceLoadLock) {
               return projectMnr?.getResource(resourceURI)
           }
        } catch (RuntimeException e) {
            // Xtext just throws a generic RuntimeException when no resource for the URI is available.
            return null
        }
    }
    
}